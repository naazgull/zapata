#pragma once

#define DEBUG_JSON

#include <map>
#include <memory>
#include <ostream>
#include <vector>
#include <zapata/base/expect.h>
#include <zapata/text/convert.h>
#include <zapata/text/manip.h>
#include <zapata/transport.h>
#include <zapata/json/JSONClass.h>

#ifndef CRLF
#define CRLF "\r\n"
#endif

namespace zpt {
namespace http {

enum status {
    HTTP100 = 100,
    HTTP101 = 101,
    HTTP102 = 102,
    HTTP200 = 200,
    HTTP201 = 201,
    HTTP202 = 202,
    HTTP203 = 203,
    HTTP204 = 204,
    HTTP205 = 205,
    HTTP206 = 206,
    HTTP207 = 207,
    HTTP208 = 208,
    HTTP226 = 226,
    HTTP300 = 300,
    HTTP301 = 301,
    HTTP302 = 302,
    HTTP303 = 303,
    HTTP304 = 304,
    HTTP305 = 305,
    HTTP306 = 306,
    HTTP307 = 307,
    HTTP308 = 308,
    HTTP400 = 400,
    HTTP401 = 401,
    HTTP402 = 402,
    HTTP403 = 403,
    HTTP404 = 404,
    HTTP405 = 405,
    HTTP406 = 406,
    HTTP407 = 407,
    HTTP408 = 408,
    HTTP409 = 409,
    HTTP410 = 410,
    HTTP411 = 411,
    HTTP412 = 412,
    HTTP413 = 413,
    HTTP414 = 414,
    HTTP415 = 415,
    HTTP416 = 416,
    HTTP417 = 417,
    HTTP422 = 422,
    HTTP423 = 423,
    HTTP424 = 424,
    HTTP425 = 425,
    HTTP426 = 426,
    HTTP427 = 427,
    HTTP428 = 428,
    HTTP429 = 429,
    HTTP430 = 430,
    HTTP431 = 431,
    HTTP451 = 451,
    HTTP500 = 500,
    HTTP501 = 501,
    HTTP502 = 502,
    HTTP503 = 503,
    HTTP504 = 504,
    HTTP505 = 505,
    HTTP506 = 506,
    HTTP507 = 507,
    HTTP508 = 508,
    HTTP509 = 509,
    HTTP510 = 510,
    HTTP511 = 511
};

static inline const char* method_names[] = { "GET",      "PUT",     "POST",  "DELETE",
                                             "HEAD",     "OPTIONS", "PATCH", "REPLY",
                                             "M-SEARCH", "NOTIFY",  "TRACE", "CONNECT" };

static inline const char* status_names[] = {
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    "Continue ",
    "Switching Protocols ",
    "Processing ",
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    "OK ",
    "Created ",
    "Accepted ",
    "Non-Authoritative Information ",
    "No Content ",
    "Reset Content ",
    "Partial Content ",
    "Multi-Status ",
    "Already Reported ",
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    "IM Used ",
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    "Multiple Choices ",
    "Moved Permanently ",
    "Found ",
    "See Other ",
    "Not Modified ",
    "Use Proxy ",
    "(Unused) ",
    "Temporary Redirect ",
    "Permanent Redirect ",
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    "Bad Request ",
    "Unauthorized ",
    "Payment Required ",
    "Forbidden ",
    "Not Found ",
    "Method Not Allowed ",
    "Not Acceptable ",
    "Proxy Authentication Required ",
    "Request Timeout ",
    "Conflict ",
    "Gone ",
    "Length Required ",
    "Precondition Failed ",
    "Payload Too Large ",
    "URI Too Long ",
    "Unsupported Media Type ",
    "Requested Range Not Satisfiable ",
    "Expectation Failed ",
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    "Unprocessable Entity ",
    "Locked ",
    "Failed Dependency ",
    "Unassigned ",
    "Upgrade Required ",
    "Unassigned ",
    "Precondition Required ",
    "Too Many Requests ",
    "Unassigned ",
    "Request Header Fields Too Large ",
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    "Unavailable For Legal Reasons",
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    "Internal Server Error ",
    "Not Implemented ",
    "Bad Gateway ",
    "Service Unavailable ",
    "Gateway Timeout ",
    "HTTP Version Not Supported ",
    "Variant Also Negotiates (Experimental) ",
    "Insufficient Storage ",
    "Loop Detected ",
    "Unassigned ",
    "Not Extended ",
    "Network Authentication Required ",
};

class basic_message : public zpt::basic_message {
  public:
    basic_message() = default;
    virtual ~basic_message() = default;

    virtual auto performative() const -> zpt::performative override;
    virtual auto status() const -> zpt::status override;
    virtual auto uri() -> zpt::json& override;
    virtual auto uri() const -> zpt::json const override;
    virtual auto version() const -> std::string override;
    virtual auto scheme() const -> std::string override;
    virtual auto resource() const -> zpt::json const override;
    virtual auto parameters() const -> zpt::json const override;
    virtual auto headers() -> zpt::json& override;
    virtual auto headers() const -> zpt::json const override;
    virtual auto body() -> zpt::json& override;
    virtual auto body() const -> zpt::json const override;
    virtual auto keep_alive() const -> bool override;
    virtual auto content_type() const -> std::string override;
    virtual auto performative(zpt::performative _performative) -> void override;
    virtual auto status(zpt::status _status) -> void override;
    virtual auto uri(std::string const& _uri) -> void override;
    virtual auto version(std::string const& _uri) -> void override;

    virtual auto anchor() const -> std::string;
    virtual auto body(std::string const& _body) -> void;
    virtual auto header(std::string const& _name, std::string const& _value) -> void;

  protected:
    zpt::json __underlying;
};

class basic_request : public zpt::http::basic_message {
  public:
    basic_request();
    basic_request(zpt::basic_message const& _request, bool);
    virtual ~basic_request() = default;

    auto to_stream(std::ostream& _out) const -> void override;
    auto from_stream(std::istream& _in) -> void override;
    auto make_reply() -> zpt::message override;
};
using request = std::shared_ptr<basic_request>;

class basic_reply : public zpt::http::basic_message {
  public:
    basic_reply();
    basic_reply(zpt::basic_message const& _request, bool);
    virtual ~basic_reply() = default;

    auto to_stream(std::ostream& _out) const -> void override;
    auto from_stream(std::istream& _in) -> void override;
    auto make_reply() -> zpt::message override;
};
using reply = std::shared_ptr<basic_reply>;
} // namespace http

void
init(zpt::http::basic_request& _out);
void
init(zpt::http::basic_reply& _out);
} // namespace zpt

auto operator"" _HTTP_REQUEST(const char* _string, size_t _length) -> zpt::message;
auto operator"" _HTTP_REPLY(const char* _string, size_t _length) -> zpt::message;

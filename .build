#!/bin/bash

source .packages.rc

if [[ "$(grep 'exclude_list' .exclude.rc)" == "" ]]
then
    echo "exclude_list=()" > .exclude.rc
fi
source .exclude.rc

threads=$(grep -c ^processor /proc/cpuinfo)
cxx_compiler=g++
cxx_version=$(${cxx_compiler} --version | head -n 1 | tr " " "\n" | tail -n 1 | tr "." "\n" | head -n 1)
if [ ${cxx_version} -lt 10 ]
then
    cxx_std_version="-std=c++17"
else
    cxx_std_version="-std=c++20"
fi
python3_version=$(python3 -V | awk '{print $2}' | cut -c-3)
lua5_version=$(lua -v | awk '{print $2}' | cut -c-3)

if [[ "${1}" == "one" || "${1}" == "from" ]]
then
    if [[ "${3}" == "" ]]
    then
        action=all
    else
        action=${3}
    fi
else
    action=${1}
fi

if [[ "${1}" != "one" && "${1}" != "from" ]]
then
    if [[ "${@:2}" != "" ]]
    then
        exclude_list=(${@:2} ${exclude_list})
    fi
fi

if [[ "${1}" == "config" || "${1}" == "config_debug" ]]
then
    echo "exclude_list=(${exclude_list[@]})" > .exclude.rc
fi

distro=$(lsb_release -c -s)
goahead="no"
project_dir=${PWD}

for package in ${projects[@]}
do
    include_dir="-I${project_dir}/${package}/include"

    if [[ "${1}" == "from" ]]
    then
        if [[ "${2}" == "${package}" ]]
        then
            goahead="yes"
        elif [[ "${goahead}" == "no" ]]
        then
            continue
        fi
    fi

    if [[ "${1}" == "one" ]]
    then
        if [[ "${2}" != "${package}" ]]
        then
            continue
        fi
    fi

    skip=0
    for exc in ${exclude_list[@]}
    do
        if [[ "${exc}" == "${package}" ]]
        then
            skip=1
            break
        fi
    done
    if [[ ${skip} == 1 ]]
    then
        continue
    fi

    title="Processing '${package}'"
    underlines=$(printf %s "${title}" | tr -c '-' '[-*]')
    echo
    echo ${title}
    echo ${underlines}
    # echo ${link_modules}

    case "${action}" in
	all)
	    CPP_STD_VERSION=${cxx_std_version} PROJECT_DIR=${project_dir} INCLUDE_DIR=${include_dir} PYTHON_VERSION=${python3_version} LUA_VERSION=${lua5_version} make -s -j$threads -C ${package}/build
	    if [[ $? != 0 ]]
	    then
		    exit -1
	    fi
	    ;;
    from)
	    CPP_STD_VERSION=${cxx_std_version} PROJECT_DIR=${project_dir} INCLUDE_DIR=${include_dir} PYTHON_VERSION=${python3_version} LUA_VERSION=${lua5_version} make -s -j$threads -C ${package}/build
	    if [[ $? != 0 ]]
	    then
		    exit -1
	    fi
        ;;
	single)
	    CPP_STD_VERSION=${cxx_std_version} PROJECT_DIR=${project_dir} INCLUDE_DIR=${include_dir} PYTHON_VERSION=${python3_version} LUA_VERSION=${lua5_version} make -s -j$threads -C ${package}/build
	    if [[ $? != 0 ]]
	    then
		    exit -1
	    fi
	    ;;
	clean)
	    CPP_STD_VERSION=${cxx_std_version} PROJECT_DIR=${project_dir} INCLUDE_DIR=${include_dir} PYTHON_VERSION=${python3_version} LUA_VERSION=${lua5_version} make -s -j$threads -C ${package}/build clean
	    ;;
	install)
	    CPP_STD_VERSION=${cxx_std_version} PROJECT_DIR=${project_dir} INCLUDE_DIR=${include_dir} PYTHON_VERSION=${python3_version} LUA_VERSION=${lua5_version} make -s -j$threads -C ${package}/build install
	    if [[ $? != 0 ]]
	    then
		    exit -1
	    fi
	    ;;
	uninstall)
	    CPP_STD_VERSION=${cxx_std_version} PROJECT_DIR=${project_dir} INCLUDE_DIR=${include_dir} PYTHON_VERSION=${python3_version} LUA_VERSION=${lua5_version} make -s -j$threads -C ${package}/build uninstall
	    ;;
	distcheck)
	    rm -rfv ${package}/*.tar.gz
	    CPP_STD_VERSION=${cxx_std_version} PROJECT_DIR=${project_dir} INCLUDE_DIR=${include_dir} PYTHON_VERSION=${python3_version} LUA_VERSION=${lua5_version} make -s -C ${package}/build -j$threads distcheck
	    if [[ $? != 0 ]]
	    then
		    exit -1
	    fi
	    ;;
	distclean)
	    rm -rfv ${package}/*.tar.gz
	    CPP_STD_VERSION=${cxx_std_version} PROJECT_DIR=${project_dir} INCLUDE_DIR=${include_dir} PYTHON_VERSION=${python3_version} LUA_VERSION=${lua5_version} make -s -j$threads -C ${package}/build distclean
	    ;;
	config)
        pushd ${package} > /dev/null
	    rm -rf build &&\
            autoreconf -vfi &&\
            mkdir build &&\
            cd build &&\
            CPP_STD_VERSION=${cxx_std_version} PROJECT_DIR=${project_dir} INCLUDE_DIR=${include_dir} PYTHON_VERSION=${python3_version} LUA_VERSION=${lua5_version} ../configure  --prefix=/usr --sysconf=/etc --libdir=/usr/lib --libexecdir=/usr/lib "CXXFLAGS=-O3 -Wall -fno-stack-protector"
	    if [[ $? != 0 ]]
	    then
		    exit -1
	    fi
        popd > /dev/null
	    ;;
	config_debug)
        pushd ${package} > /dev/null
	    rm -rf build &&\
            autoreconf -vfi &&\
            mkdir build &&\
            cd build &&\
            CPP_STD_VERSION=${cxx_std_version} PROJECT_DIR=${project_dir} INCLUDE_DIR=${include_dir} PYTHON_VERSION=${python3_version} LUA_VERSION=${lua5_version} ../configure  --prefix=/usr --sysconf=/etc --libdir=/usr/lib --libexecdir=/usr/lib "CXXFLAGS=-O0 -ggdb3 -Wall"
	    if [[ $? != 0 ]]
	    then
		    exit -1
	    fi
        popd > /dev/null
	    ;;
    format)
        pushd ${package} > /dev/null
        change_list=($(find . -name "*.cpp" -o -name "*.h"))
        for f in ${change_list[@]}
        do
            echo "checking '${f}'"
            dos2unix ${f}
            clang-format -i --style=file ${f}
	        if [[ $? != 0 ]]
	        then
		        exit -1
	        fi
        done
        ;;
    esac

    if [[ "${1}" == "one" ]]
    then
        exit 0
    fi
done
